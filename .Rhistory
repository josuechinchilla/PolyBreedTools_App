beta_hat
sqrt(o.3)
sqrt(0.3)
sqrt(0.5)
library(AGHmatrix)
library(stats)
library(factoextra)
library(readxl)
library(ggrepel)
library(dplyr)
install.packages(c("estimability", "farver", "knitr", "segmented", "vegan"))
getwd()
citation("BIGapp")
devtools::install_github("Breeding-Insight/BIGapp", ref = "development")
BIGapp::run_app()
BIGapp::run_app()
devtools::install_github("jendelman/COMA")
devtools::install_github("jendelman/StageWise")
BIGapp::run_app()
BIGapp::run_app()
BIGapp::run_app()
BIGapp::run_app()
devtools::install_github("Breeding-Insight/BIGapp", ref="gs-updates")
BIGapp::run_app()
shiny::runGitHub("trout-app", "ackermanar")
shiny::runGitHub("trout-app", "ackermanar")
shiny::runGitHub("trout-app", "ackermanar")
shiny::runGitHub("trout-app", "ackermanar")
shiny::runGitHub("trout-app", "ackermanar")
shiny::runGitHub("trout-app", "ackermanar")
shiny::runGitHub("trout-app", "ackermanar")
BIGapp::run_app()
shiny::runGitHub("trout-app", "ackermanar")
BIGapp::run_app()
shiny::runGitHub("trout-app", "ackermanar")
shiny::runApp('Desktop/shiny_apps/CodeRepo')
runApp('Desktop/shiny_apps/CodeRepo')
runApp('Desktop/shiny_apps/CodeRepo')
runApp('Desktop/shiny_apps/CodeRepo')
runApp('Desktop/shiny_apps/CodeRepo')
install.packages("gmodels")
library(gmodels)
loan_data
shiny::runApp('Desktop/shiny_apps/slurm')
deployApp()
rsconnect::deployApp()
install.packages("BiocManager")
BiocManager::install("VariantAnnotation")
devtools::install_github("inzilico/imputeqc", build_vignettes = TRUE)
browseVignettes("imputeqc")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("Breeding-Insight/BIGapp")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
BIGapp::run_app()
BIGapp::run_app()
devtools::install_github("Breeding-Insight/BIGapp")
devtools::install_github("Breeding-Insight/BIGapp")
BIGapp::run_app()
devtools::install_github("Breeding-Insight/BIGapp")
devtools::install_github("Breeding-Insight/BIGapp")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("Breeding-Insight/BIGapp")
BIGapp::run_app()
devtools::install_github("Breeding-Insight/BIGapp")
devtools::install_github("Breeding-Insight/BIGr")
devtools::install_github("Breeding-Insight/BIGr")
install.packages("pwalign")
install.packages("BioConductor")
install.packages("Bioconductor")
install.packages("bioconductor")
install.packages("BiocManager")
BiocManager::install()
BiocManager::valid()
BiocManager::version()
BiocMAnager::install("pwalign")
BiocManager::install("pwalign")
devtools::install_github("Breeding-Insight/BIGapp")
BIGapp::run_app()
BIGapp::run_app()
BIGapp::run_app()
BIGapp::run_app()
shiny::runApp('Desktop/shiny_apps/slurm')
runApp('Desktop/shiny_apps/slurm')
runApp('Desktop/shiny_apps/slurm')
runApp('Desktop/shiny_apps/slurm')
runApp('Desktop/shiny_apps/slurm')
runApp('Desktop/shiny_apps/slurm')
# Load necessary libraries
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.ars.usda.gov/pacific-west-area/corvallis-or/forage-seed-and-cereal-research-unit/people/john-henning/cultindex/"
# Read the webpage
page <- read_html(url)
# Extract cultivar names and links
cultivar_data <- page %>%
html_nodes("a") %>%
mutate(
name = html_text(trim = TRUE),
url = html_attr("href")
) %>%
filter(grepl("cultivar", url, ignore.case = TRUE) | grepl("#", url)) %>%
mutate(
url = ifelse(grepl("^http", url), url, paste0(url, url))
) %>%
select(name, url)
# Load necessary libraries
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.ars.usda.gov/pacific-west-area/corvallis-or/forage-seed-and-cereal-research-unit/people/john-henning/cultindex/"
# Read the webpage
page <- read_html(url)
# Read the webpage
page <- read_html(url)
# Load necessary libraries
library(rvest)
library(dplyr)
# Define the URL
url <- "https://www.ars.usda.gov/pacific-west-area/corvallis-or/forage-seed-and-cereal-research-unit/people/john-henning/cultindex/"
# Read the webpage
page <- read_html(url)
# Extract cultivar names and links
cultivar_data <- page %>%
html_nodes("a") %>%
mutate(
name = html_text(trim = TRUE),
url = html_attr("href")
) %>%
filter(grepl("cultivar", url, ignore.case = TRUE) | grepl("#", url)) %>%
mutate(
url = ifelse(grepl("^http", url), url, paste0(url, url))
) %>%
select(name, url)
# Extract cultivar names and links
cultivar_names <- page %>%
html_nodes("a") %>%
html_text(trim = TRUE)
cultivar_links <- page %>%
html_nodes("a") %>%
html_attr("href")
# Create a data frame
cultivar_data <- tibble(name = cultivar_names, url = cultivar_links) %>%
filter(grepl("cultivar", url, ignore.case = TRUE) | grepl("#", url)) %>%
mutate(url = ifelse(grepl("^http", url), url, paste0(url, url)))  # Fix relative URLs
# Print results
print(cultivar_data)
# Extract cultivar names and links
cultivar_names <- page %>%
html_nodes("a") %>%
html_text(trim = TRUE)
cultivar_links <- page %>%
html_nodes("a") %>%
html_attr("href")
# Create a data frame
cultivar_data <- tibble(name = cultivar_names, url = cultivar_links) %>%
filter(grepl("cultivar", url, ignore.case = TRUE) | grepl("#", url)) %>%
mutate(url = ifelse(grepl("^http", url), url, paste0(url, url)))  # Fix relative URLs
# Create a data frame
cultivar_data <- tibble(name = cultivar_names, url = cultivar_links) %>%
filter(grepl("cultivar", url, ignore.case = TRUE) | grepl("#", url)) %>%
mutate(url = ifelse(grepl("^http", url), url, paste0(url, url)))  # Fix relative URLs
# Load necessary libraries
library(rvest)
library(dplyr)
# Create a data frame
cultivar_data <- tibble(name = cultivar_names, url = cultivar_links) %>%
filter(grepl("cultivar", url, ignore.case = TRUE) | grepl("#", url)) %>%
mutate(url = ifelse(grepl("^http", url), url, paste0(url, url)))  # Fix relative URLs
View(cultivar_data)
devtools::install_github("funkhou9/snpTools")
library(scales)
library(tidyverse)
# read in data
reference = read.table("~/Library/CloudStorage/Box-Box/Breeding Insight 2/Species/Honeybee/breed_composition/honeybee/breedtools/2010_paper_sets/2010_reference.txt", header = T, row.names = 1, sep = "\t")
validation = read.table("~/Library/CloudStorage/Box-Box/Breeding Insight 2/Species/Honeybee/breed_composition/honeybee/breedtools/2010_paper_sets/2010_validation.txt", header = T, row.names = 1, sep = "\t")
reference_ids = read.table("~/Library/CloudStorage/Box-Box/Breeding Insight 2/Species/Honeybee/breed_composition/honeybee/breedtools/2010_paper_sets/ref_ids.txt", header = T, sep = "\t") %>%
rename("non-RHB" = non.RHB)
ref_ids = lapply(as.list(reference_ids),as.character)
raw_data <- read.table("bee_raw_genotypes.txt", header = TRUE, sep = "\t") %>%
select(c(1, 2)) %>%
rename(original_line = line)
# read in data
reference = read.table("~/Desktop/BreedToolspoly_test/blueberry_ref.txt", header = T, row.names = 1, sep = "\t")
# read in data
reference = read.table("~/Desktop/BreedToolspoly_test/blueberry_ref.txt", header = T, row.names = 1, sep = "\t")
# read in data
reference = read.table("~/Desktop/Blueberry_line_estimation/blueberry_ref.txt", header = T, row.names = 1, sep = "\t")
validation = read.table("~/Desktop/Blueberry_line_estimation/blueberry_test.txt", header = T, row.names = 1, sep = "\t")
reference_ids = read.table("~/Desktop/Blueberry_line_estimation/ref_ids.txt", header = T, sep = "\t")
ref_ids = lapply(as.list(reference_ids),as.character)
#calculate allele frequency of reference panel
freq2 = allele_freq_poly(reference, ref_ids, ploid = 4)
library(PolyBreedTools)
BIGapp::run_app()
# Instalar paquetes si es necesario
install.packages("geodata")
library(geodata)
library(sf)
library(ggplot2)
library(dplyr)
# 1. Descargar provincias y cantones de Costa Rica (nivel 2 = cantones)
cr_adm2 <- gadm(country = "CRI", level = 2, path = tempdir())
cr_adm2_sf <- st_as_sf(cr_adm2)
# 2. Filtrar para eliminar Isla del Coco (recorte del Ã¡rea continental)
cr_adm2_mainland <- cr_adm2_sf %>%
st_crop(xmin = -86.5, xmax = -82.5, ymin = 8, ymax = 11.5)
# 3. Ejemplo de datos de puntos (latitud y longitud)
puntos <- data.frame(
lon = c(-84.1, -83.7, -85.0),
lat = c(10.0, 9.8, 10.5)
)
# Convertir a objeto sf
puntos_sf <- st_as_sf(puntos, coords = c("lon", "lat"), crs = 4326)
# 4. Graficar el mapa sin Isla del Coco, con puntos uniformes
ggplot() +
geom_sf(data = cr_adm2_mainland, fill = "white", color = "black") +
geom_sf(data = puntos_sf, shape = 21, fill = "black", color = "black", size = 2) +
ggtitle("Mapa de Costa Rica (solo continente) con puntos de datos") +
theme_minimal()
devtools::install_github(josuechinchilla/PolyBreedTools)
devtools::install_github("BreedingInsight/BIGapp")
shiny::runApp('Desktop/GitHub/BI_Genotype_IDs_Generator')
compute_relationship_matrix <- function(mat,
ploidy,
method = "VanRaden",
impute = TRUE) {
### Prepare matrix
#Remove any SNPs that are all NAs
mat <- mat[, colSums(is.na(mat)) < nrow(mat)]
#impute the missing values with the mean of the column
if (impute) {
mat <- data.frame(mat, check.names = FALSE, check.rows = FALSE) %>%
mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x)) %>%
as.matrix()
}
if (method == "VanRaden") {
# Calculate the additive relationship matrix using VanRaden's method
#Calculate allele frequencies
p <- apply(mat, 2, mean, na.rm = TRUE)
q <- 1 - p
#Calculate the denominator
#Note: need to use 1/ploidy for ratios, where ploidy should be used for dosages.
#This is because the ratios are from 0-1, which is what you get when dosage/ploidy, whereas dosages are from 0 to ploidy
denominator <- (1/as.numeric(ploidy))*sum(p * q, na.rm = TRUE)
#Get the numerator
Z <- scale(mat, center = TRUE, scale = FALSE)
ZZ <- (Z %*% t(Z))
#Calculate the additive relationship matrix
A.mat <- ZZ / denominator
return(A.mat)
}
}
compute_relationship_matrix <- function(mat,
ploidy,
method = "VanRaden",
impute = TRUE) {
### Prepare matrix
#Remove any SNPs that are all NAs
mat <- mat[, colSums(is.na(mat)) < nrow(mat)]
#impute the missing values with the mean of the column
if (impute) {
mat <- data.frame(mat, check.names = FALSE, check.rows = FALSE) %>%
mutate_all(~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x)) %>%
as.matrix()
}
if (method == "VanRaden") {
# Calculate the additive relationship matrix using VanRaden's method
#Calculate allele frequencies
p <- apply(mat, 2, mean, na.rm = TRUE)
q <- 1 - p
#Calculate the denominator
#Note: need to use 1/ploidy for ratios, where ploidy should be used for dosages.
#This is because the ratios are from 0-1, which is what you get when dosage/ploidy, whereas dosages are from 0 to ploidy
denominator <- (1/as.numeric(ploidy))*sum(p * q, na.rm = TRUE)
#Get the numerator
Z <- scale(mat, center = TRUE, scale = FALSE)
ZZ <- (Z %*% t(Z))
#Calculate the additive relationship matrix
A.mat <- ZZ / denominator
return(A.mat)
}
}
library(shiny); runApp('Desktop/test.R')
runApp('Desktop/test.R')
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny); runApp('test.R')
library(breedTools)
library(scales)
library(tidyverse)
# read in data
reference = read.table("~/Desktop/BreedToolspoly_test/blueberry_ref.txt", header = T, row.names = 1, sep = "\t")
runApp('test.R')
# Write final results
write.table(
pred_results_formatted,
"honeybee_regression_results_2010_paper_sets.txt",
col.names = TRUE,
sep = "\t",
quote = FALSE,
row.names = FALSE
)
require(shiny)
require(viridis)
require(BIGr)
require(scales)
require(tidyverse)
require(openxlsx)
#### Helper Functions ####
format_percent <- function(x) {
percent_format(accuracy = 0.1)(x)
}
#### UI ####
ui <- fluidPage(
tags$head(
tags$style(HTML("
.header-img {
text-align: center;
margin-bottom: 20px;
}
.header-img img {
max-width: 80%;
height: auto;
}
"))
),
div(class = "header-img",
img(src = "logos.png", alt = "Logos")
),
titlePanel("PolyBreedTools App: Estimate breed/line composition for any ploidy"),
fluidRow(
column(12,
wellPanel(
HTML('
<ul>
<li>This tool was developed by <strong>Breeding Insight</strong>.</li>
<li>It estimates the breed/line composition from genotype samples using methods from
<a href="https://www.animalsciencepublications.org/publications/tas/articles/1/1/36" target="_blank">Funkhouser et al. (2017)</a>.
</li>
<li><strong>Input files:</strong>
<ul>
<li><strong>Reference panel (.txt):</strong> SNPs in columns, samples in rows, first three columns: <code>ID</code>, <code>ref</code>, <code>alt</code></li>
<li><strong>Reference IDs (.txt):</strong> A two-column table (Line, ID) with header</li>
<li><strong>Genotype file (.txt):</strong> SNPs in rows, same format as reference</li>
</ul>
</li>
<li><strong>Ploidy:</strong> Enter the ploidy level of the organism.</li>
</ul>
')
)
)
),
sidebarLayout(
sidebarPanel(
fileInput("reference_file", "Upload Reference Genotypes (.txt)", accept = ".txt"),
fileInput("ref_ids_file", "Upload Reference IDs (.txt)", accept = ".txt"),
fileInput("validation_file", "Upload Genotypes to Test (.txt)", accept = ".txt"),
numericInput("ploidy", "Ploidy", value = 2, min = 1, max = 10, step = 1),
actionButton("run", "Run Estimation"),
br(), br(),
downloadButton("download_results", "Download Excel Results")
),
mainPanel(
tabsetPanel(
tabPanel("Results Table", DT::dataTableOutput("preview")),
tabPanel("Ancestry Plot", plotOutput("bar_plot"))
),
verbatimTextOutput("status")
)
)
)
#### SERVER ####
server <- function(input, output, session) {
result_data <- reactiveVal(NULL)
result_filename <- reactiveVal(NULL)
observeEvent(input$run, {
req(input$reference_file, input$ref_ids_file, input$validation_file, input$ploidy)
output$status <- renderText("Running estimation...")
# Load and process reference genotype matrix
reference_raw <- read.table(
input$reference_file$datapath,
, header = T, row.names = 1, sep = "\t")
# Read reference genotypes
reference <- read.table(
input$reference_file$datapath,
header = TRUE,
row.names = 1,
sep = "\t"
)
# Read reference IDs
reference_ids <- read.table(
input$ref_ids_file$datapath,
header = TRUE,
row.names = 1,
sep = "\t"
)
ref_ids <- lapply(as.list(reference_ids), as.character)
# Load and process validation genotype matrix
validation_raw <- read.table(
input$validation_file$datapath,
header = TRUE,
sep = "\t"
)
validation <- validation_raw %>%
column_to_rownames(var = "ID") %>%
as.data.frame()
# Estimate allele frequencies
freq <- BIGr:::allele_freq_poly(reference, ref_ids, ploidy = input$ploidy)
# Predict ancestry composition
prediction <- as.data.frame(BIGr:::solve_composition_poly(validation, freq, ploidy = input$ploidy)) %>%
select(-R2) %>%
rename(
`RHB content` = RHB,
`non-RHB content` = non.RHB
)
columns_to_select <- c("RHB content", "non-RHB content")
pred_results <- prediction %>%
rownames_to_column(var = "ID") %>%
mutate(
across(-ID, ~format_percent(.)),
`Predicted line` = columns_to_select[max.col(select(., all_of(columns_to_select)), ties.method = "first")]
)
result_data(pred_results)
# Save Excel file
date_str <- format(Sys.Date(), "%Y-%m-%d")
filename <- paste0("RHB_estimation_", date_str, ".xlsx")
temp_path <- file.path(tempdir(), filename)
result_filename(temp_path)
write.xlsx(pred_results, file = temp_path, rowNames = FALSE)
# Render results table
output$preview <- DT::renderDataTable({
DT::datatable(pred_results, options = list(pageLength = 10))
})
# Prepare and render plot
pred_results_long <- prediction %>%
rownames_to_column(var = "ID") %>%
pivot_longer(
cols = where(is.numeric),
names_to = "category",
values_to = "percent"
)
output$bar_plot <- renderPlot({
ggplot(pred_results_long, aes(x = ID, y = percent, fill = category)) +
geom_bar(stat = "identity") +
scale_fill_viridis_d(option = "D") +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(
x = "Individual ID",
y = "Ancestry Proportion",
fill = "Line"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
})
output$status <- renderText("Estimation complete. File ready for download.")
})
output$download_results <- downloadHandler(
filename = function() {
basename(result_filename())
},
content = function(file) {
file.copy(result_filename(), file)
}
)
}
shinyApp(ui, server)
# Predict ancestry composition
prediction <- as.data.frame(BIGr:::solve_composition_poly(validation, freq, ploidy = input$ploidy)) %>%
select(-R2) %>%
rename(
`RHB content` = RHB,
`non-RHB content` = non.RHB
)
clear
# Estimate allele frequencies
freq <- BIGr:::allele_freq_poly(reference, ref_ids, ploidy = input$ploidy)
# Load and process reference genotype matrix
reference_raw <- read.table(
input$reference_file$datapath,
, header = T, sep = "\t")
shinyApp(ui, server)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp(Desktop/test.R)
runApp(~Desktop/test.R)
setwd("~/Desktop")
runApp('test.R')
setwd("~/Desktop/BreedTools_App")
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
